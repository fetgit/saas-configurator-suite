// ===================================================================
// SCRIPT DE TEST DE CONNEXION POSTGRESQL
// Script pour tester la connexion √† votre base PostgreSQL locale
// ===================================================================

const { Client } = require('pg');

// Configuration de connexion (adaptez selon votre setup)
const config = {
  host: 'localhost',
  port: 5432,
  database: 'postgres', // Base par d√©faut
  user: 'postgres',     // Utilisateur par d√©faut
  password: process.env.POSTGRES_PASSWORD || 'postgres', // Mot de passe depuis variable d'environnement
  ssl: false
};

// Fonction pour demander les param√®tres de connexion
function getConnectionConfig() {
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    console.log('üîß Configuration de connexion PostgreSQL');
    console.log('Appuyez sur Entr√©e pour utiliser les valeurs par d√©faut\n');
    
    rl.question('Host (localhost): ', (host) => {
      rl.question('Port (5432): ', (port) => {
        rl.question('Username (postgres): ', (user) => {
          rl.question('Password: ', (password) => {
            rl.close();
            resolve({
              host: host || 'localhost',
              port: parseInt(port) || 5432,
              user: user || 'postgres',
              password: password || 'postgres',
              database: 'postgres',
              ssl: false
            });
          });
        });
      });
    });
  });
}

async function testConnection(connectionConfig = config) {
  const client = new Client(connectionConfig);
  
  try {
    console.log('üîÑ Tentative de connexion √† PostgreSQL...');
    console.log(`üìç Host: ${connectionConfig.host}:${connectionConfig.port}`);
    console.log(`üóÑÔ∏è  Database: ${connectionConfig.database}`);
    console.log(`üë§ User: ${connectionConfig.user}`);
    
    await client.connect();
    console.log('‚úÖ Connexion r√©ussie !');
    
    // Test de requ√™te simple
    const result = await client.query('SELECT version()');
    console.log('üìä Version PostgreSQL:', result.rows[0].version);
    
    // Test de cr√©ation d'une base de donn√©es pour l'application
    const dbName = 'saas_configurator';
    console.log(`\nüîÑ V√©rification de la base de donn√©es '${dbName}'...`);
    
    const dbCheck = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = $1", 
      [dbName]
    );
    
    if (dbCheck.rows.length === 0) {
      console.log(`üìù Cr√©ation de la base de donn√©es '${dbName}'...`);
      await client.query(`CREATE DATABASE ${dbName}`);
      console.log(`‚úÖ Base de donn√©es '${dbName}' cr√©√©e avec succ√®s !`);
    } else {
      console.log(`‚úÖ Base de donn√©es '${dbName}' existe d√©j√†.`);
    }
    
    // Test de connexion √† la nouvelle base
    console.log(`\nüîÑ Test de connexion √† la base '${dbName}'...`);
    await client.end();
    
    const appClient = new Client({
      ...connectionConfig,
      database: dbName
    });
    
    await appClient.connect();
    console.log(`‚úÖ Connexion √† '${dbName}' r√©ussie !`);
    
    // Test de cr√©ation des extensions
    console.log('\nüîÑ Test des extensions PostgreSQL...');
    
    try {
      await appClient.query('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"');
      console.log('‚úÖ Extension uuid-ossp disponible');
    } catch (error) {
      console.log('‚ö†Ô∏è  Extension uuid-ossp non disponible:', error.message);
    }
    
    try {
      await appClient.query('CREATE EXTENSION IF NOT EXISTS "pg_trgm"');
      console.log('‚úÖ Extension pg_trgm disponible');
    } catch (error) {
      console.log('‚ö†Ô∏è  Extension pg_trgm non disponible:', error.message);
    }
    
    // Test de g√©n√©ration d'UUID
    const uuidResult = await appClient.query('SELECT uuid_generate_v4() as test_uuid');
    console.log('‚úÖ G√©n√©ration d\'UUID test√©e:', uuidResult.rows[0].test_uuid);
    
    await appClient.end();
    
    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');
    console.log('\nüìã Configuration recommand√©e pour l\'application :');
    console.log(`   Host: ${connectionConfig.host}`);
    console.log(`   Port: ${connectionConfig.port}`);
    console.log(`   Database: ${dbName}`);
    console.log(`   Username: ${connectionConfig.user}`);
    console.log(`   Password: [votre mot de passe]`);
    console.log(`   SSL: false`);
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message);
    console.log('\nüîß Solutions possibles :');
    console.log('1. V√©rifiez que PostgreSQL est d√©marr√©');
    console.log('2. V√©rifiez les param√®tres de connexion (host, port, user, password)');
    console.log('3. V√©rifiez que l\'utilisateur a les permissions n√©cessaires');
    console.log('4. V√©rifiez les param√®tres de pg_hba.conf');
  }
}

// Fonction pour cr√©er les tables de configuration
async function createConfigTables(connectionConfig = config) {
  const client = new Client({
    ...connectionConfig,
    database: 'saas_configurator'
  });
  
  try {
    console.log('\nüîÑ Cr√©ation des tables de configuration...');
    await client.connect();
    
    // Lire le fichier SQL
    const fs = require('fs');
    const path = require('path');
    const sqlFile = path.join(__dirname, '..', 'docs', 'ADMIN_CONFIG_TABLES.sql');
    
    if (fs.existsSync(sqlFile)) {
      const sql = fs.readFileSync(sqlFile, 'utf8');
      await client.query(sql);
      console.log('‚úÖ Tables de configuration cr√©√©es avec succ√®s !');
    } else {
      console.log('‚ö†Ô∏è  Fichier SQL non trouv√©:', sqlFile);
    }
    
    await client.end();
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des tables:', error.message);
  }
}

// Fonction principale
async function main() {
  console.log('üöÄ Test de connexion PostgreSQL pour SaaS Configurator Suite\n');
  
  // Demander les param√®tres de connexion
  const connectionConfig = await getConnectionConfig();
  
  await testConnection(connectionConfig);
  
  // Demander si on veut cr√©er les tables
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  rl.question('\n‚ùì Voulez-vous cr√©er les tables de configuration ? (y/n): ', async (answer) => {
    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      await createConfigTables(connectionConfig);
    }
    rl.close();
  });
}

// Ex√©cuter le script
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { testConnection, createConfigTables };
