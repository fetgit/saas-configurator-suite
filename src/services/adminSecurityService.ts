import { useAuth } from '@/contexts/AuthContext';

// Types pour les √©v√©nements de s√©curit√©
export interface SecurityEvent {
  id: string;
  type: 'login_failed' | 'login_success' | 'suspicious_activity' | 'admin_action' | 'data_access' | 'permission_denied';
  severity: 'low' | 'medium' | 'high' | 'critical';
  user: string;
  ip: string;
  timestamp: string;
  description: string;
  resolved: boolean;
}

// Types pour les r√®gles de s√©curit√©
export interface SecurityRule {
  id: string;
  name: string;
  description: string;
  enabled: boolean;
  severity: 'low' | 'medium' | 'high';
  actions: string[];
}

// Types pour les cl√©s API
export interface ApiKey {
  id: string;
  name: string;
  key: string;
  permissions: string[];
  lastUsed: string;
  created: string;
  active: boolean;
}

// Types pour les m√©triques de s√©curit√©
export interface SecurityMetrics {
  totalEvents: number;
  criticalEvents: number;
  unresolvedEvents: number;
  securityScore: number;
  totalUsers: number;
  activeSessions: number;
  blockedAttempts: number;
  lastScan: string;
  vulnerabilities: number;
  threatsBlocked: number;
  uptime: string;
}

class AdminSecurityService {
  private baseUrl: string;

  constructor() {
    this.baseUrl = import.meta.env.VITE_API_URL || 'http://localhost:3003';
  }

  private async getAuthHeaders(): Promise<HeadersInit> {
    // Import dynamique pour √©viter les d√©pendances circulaires
    const { AuthService } = await import('./authService');
    
    // V√©rifier d'abord si l'utilisateur est authentifi√©
    const isAuthenticated = await AuthService.isAuthenticated();
    if (!isAuthenticated) {
      console.log('üîç AdminSecurity: Utilisateur non authentifi√©');
      return {
        'Content-Type': 'application/json',
        'Authorization': '',
      };
    }
    
    const tokens = await AuthService.getStoredTokens();
    const token = tokens?.accessToken;
    
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : '',
    };
  }

  private async handleResponse<T>(response: Response): Promise<T> {
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: 'Erreur inconnue' }));
      throw new Error(errorData.error || `Erreur HTTP: ${response.status}`);
    }
    return response.json();
  }

  // R√©cup√©rer les m√©triques de s√©curit√©
  async getSecurityMetrics(): Promise<SecurityMetrics> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/metrics`, {
        method: 'GET',
        headers: await this.getAuthHeaders(),
      });

      return this.handleResponse<SecurityMetrics>(response);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des m√©triques de s√©curit√©:', error);
      // Retourner des m√©triques par d√©faut si le backend n'est pas disponible
      return {
        totalEvents: 0,
        criticalEvents: 0,
        unresolvedEvents: 0,
        securityScore: 85,
        totalUsers: 0,
        activeSessions: 0,
        blockedAttempts: 0,
        lastScan: new Date().toISOString(),
        vulnerabilities: 0,
        threatsBlocked: 0,
        uptime: '99.9%'
      };
    }
  }

  // R√©cup√©rer les √©v√©nements de s√©curit√©
  async getSecurityEvents(): Promise<SecurityEvent[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/events`, {
        method: 'GET',
        headers: await this.getAuthHeaders(),
      });

      return this.handleResponse<SecurityEvent[]>(response);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des √©v√©nements de s√©curit√©:', error);
      // Retourner des √©v√©nements par d√©faut si le backend n'est pas disponible
      return this.getDefaultSecurityEvents();
    }
  }

  // R√©cup√©rer les r√®gles de s√©curit√©
  async getSecurityRules(): Promise<SecurityRule[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/rules`, {
        method: 'GET',
        headers: await this.getAuthHeaders(),
      });

      return this.handleResponse<SecurityRule[]>(response);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des r√®gles de s√©curit√©:', error);
      // Retourner des r√®gles par d√©faut si le backend n'est pas disponible
      return this.getDefaultSecurityRules();
    }
  }

  // R√©cup√©rer les cl√©s API
  async getApiKeys(): Promise<ApiKey[]> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/api-keys`, {
        method: 'GET',
        headers: await this.getAuthHeaders(),
      });

      return this.handleResponse<ApiKey[]>(response);
    } catch (error) {
      console.error('Erreur lors de la r√©cup√©ration des cl√©s API:', error);
      // Retourner des cl√©s par d√©faut si le backend n'est pas disponible
      return [];
    }
  }

  // R√©soudre un √©v√©nement de s√©curit√©
  async resolveSecurityEvent(eventId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/events/${eventId}/resolve`, {
        method: 'POST',
        headers: await this.getAuthHeaders(),
      });

      await this.handleResponse(response);
    } catch (error) {
      console.error('Erreur lors de la r√©solution de l\'√©v√©nement:', error);
      throw error;
    }
  }

  // Toggle une r√®gle de s√©curit√©
  async toggleSecurityRule(ruleId: string, enabled: boolean): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/rules/${ruleId}`, {
        method: 'PUT',
        headers: await this.getAuthHeaders(),
        body: JSON.stringify({ enabled }),
      });

      await this.handleResponse(response);
    } catch (error) {
      console.error('Erreur lors de la modification de la r√®gle:', error);
      throw error;
    }
  }

  // Cr√©er une nouvelle cl√© API
  async createApiKey(name: string, permissions: string[]): Promise<ApiKey> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/api-keys`, {
        method: 'POST',
        headers: await this.getAuthHeaders(),
        body: JSON.stringify({ name, permissions }),
      });

      return this.handleResponse<ApiKey>(response);
    } catch (error) {
      console.error('Erreur lors de la cr√©ation de la cl√© API:', error);
      throw error;
    }
  }

  // R√©voquer une cl√© API
  async revokeApiKey(keyId: string): Promise<void> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/api-keys/${keyId}/revoke`, {
        method: 'POST',
        headers: await this.getAuthHeaders(),
      });

      await this.handleResponse(response);
    } catch (error) {
      console.error('Erreur lors de la r√©vocation de la cl√© API:', error);
      throw error;
    }
  }

  // Exporter le rapport de s√©curit√©
  async exportSecurityReport(): Promise<Blob> {
    try {
      const response = await fetch(`${this.baseUrl}/api/admin/security/export`, {
        method: 'GET',
        headers: await this.getAuthHeaders(),
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      return response.blob();
    } catch (error) {
      console.error('Erreur lors de l\'export du rapport:', error);
      throw error;
    }
  }

  // Donn√©es par d√©faut pour les √©v√©nements de s√©curit√©
  private getDefaultSecurityEvents(): SecurityEvent[] {
    return [
      {
        id: '1',
        type: 'login_failed',
        severity: 'medium',
        user: 'admin@example.com',
        ip: '192.168.1.100',
        timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // Il y a 30 minutes
        description: 'Tentative de connexion √©chou√©e avec mot de passe incorrect',
        resolved: false
      },
      {
        id: '2',
        type: 'suspicious_activity',
        severity: 'high',
        user: 'user@example.com',
        ip: '203.0.113.42',
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // Il y a 2 heures
        description: 'Activit√© suspecte d√©tect√©e: acc√®s depuis une nouvelle localisation',
        resolved: false
      },
      {
        id: '3',
        type: 'admin_action',
        severity: 'low',
        user: 'admin@example.com',
        ip: '192.168.1.100',
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(), // Il y a 4 heures
        description: 'Modification des param√®tres de s√©curit√© par l\'administrateur',
        resolved: true
      },
      {
        id: '4',
        type: 'permission_denied',
        severity: 'medium',
        user: 'user@example.com',
        ip: '192.168.1.150',
        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6).toISOString(), // Il y a 6 heures
        description: 'Tentative d\'acc√®s non autoris√© √† une ressource prot√©g√©e',
        resolved: false
      }
    ];
  }

  // Donn√©es par d√©faut pour les r√®gles de s√©curit√©
  private getDefaultSecurityRules(): SecurityRule[] {
    return [
      {
        id: '1',
        name: 'Protection contre les attaques par force brute',
        description: 'Bloque automatiquement les IP apr√®s 5 tentatives de connexion √©chou√©es',
        enabled: true,
        severity: 'high',
        actions: ['block_ip', 'send_alert', 'log_event']
      },
      {
        id: '2',
        name: 'D√©tection d\'activit√© suspecte',
        description: 'Surveille les connexions depuis de nouvelles localisations',
        enabled: true,
        severity: 'medium',
        actions: ['send_alert', 'require_2fa', 'log_event']
      },
      {
        id: '3',
        name: 'Protection XSS',
        description: 'Filtre et bloque les tentatives d\'injection de scripts malveillants',
        enabled: true,
        severity: 'high',
        actions: ['block_request', 'send_alert', 'log_event']
      },
      {
        id: '4',
        name: 'Protection CSRF',
        description: 'V√©rifie les tokens CSRF pour toutes les requ√™tes POST/PUT/DELETE',
        enabled: true,
        severity: 'high',
        actions: ['block_request', 'log_event']
      },
      {
        id: '5',
        name: 'Limitation du taux de requ√™tes',
        description: 'Limite le nombre de requ√™tes par IP pour pr√©venir les attaques DDoS',
        enabled: true,
        severity: 'medium',
        actions: ['rate_limit', 'log_event']
      },
      {
        id: '6',
        name: 'Surveillance des acc√®s administrateur',
        description: 'Enregistre et alerte sur toutes les actions administratives sensibles',
        enabled: true,
        severity: 'medium',
        actions: ['send_alert', 'log_event', 'require_2fa']
      }
    ];
  }
}

// Instance singleton
export const adminSecurityService = new AdminSecurityService();
export default adminSecurityService;
